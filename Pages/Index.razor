@page "/"

@using Data
@using Services
@using Models

@inject IMovieFinder _movieFind
@inject IDialogService _dialog
@inject IMovieStore _storage
@inject NavigationManager _navManager

<MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="@(_movieFind.IsSearching ? "" : "invisible")" />
<MudStack Justify="Justify.Center" Spacing="10" Class="my-10 py-10">
    <MudText Align="Align.Center" Typo="Typo.h2">Movie Database</MudText>
    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
        <MudTextField Counter="80" MaxLength="80" Label="Search by title" Variant="Variant.Outlined" Adornment="Adornment.End" 
                      AdornmentIcon="@Icons.Filled.Search" Immediate="true" 
                      ReadOnly="@_movieFind.IsSearching" @bind-Value="_textValue" @onkeydown="OnKeyReturnAsync" />
    </MudFocusTrap>
</MudStack>

@code {
    private string? _textValue;

    public async Task OnKeyReturnAsync(KeyboardEventArgs e)
    {
        if ((e.Code != "Enter" && e.Code != "NumpadEnter") || string.IsNullOrWhiteSpace(_textValue))
            return;

        Movie? movie = await _movieFind.ByTitleAsync(_textValue);

        var options = new DialogOptions { FullWidth = true };
        if(!(movie?.Response ?? false))
        {
            await _dialog.ShowMessageBox("Alert", "Unable to query, check the api key.", "OK", null, null, options);
        }
        else if (movie?.ImdbID == null)
            await _dialog.ShowMessageBox("Alert",
                $"Movie with name '{_textValue}' not found, please try another one.", "OK", null, null, options);
        else
        {
            await _storage.SaveOrUpdateAsync($"mv-{movie.ImdbID}", movie);
            _navManager.NavigateTo($"/cards");
        }
    }
}

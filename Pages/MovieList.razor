@page "/movies"

@using Models;

@inject ILocalStorageService _localStorage;

@if (AllMovies == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudGrid>
        @foreach (Movie movie in AllMovies)
        {
            <MudItem xs="12" sm="6" md="4" lg="4" xl="3">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1" Class="text-truncate">@movie.TitleAndYear</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Filled.Cancel" Color="Color.Default"
                                   Title="Remove this movie" @onclick="async () => await RemoveMovieAsync(movie)" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="@movie.Poster" Height="444" Title="@movie.TitleAndYear" />
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudRating ReadOnly="true" MaxValue="5" Class="py-3" SelectedValue="@movie.Stars" />
                            <MudText Typo="Typo.body1" Class="mt-3">@movie.Rating</MudText>
                        </MudStack>
                        <MudText Typo="Typo.body2">@movie.PlotTruncated</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private List<Movie>? AllMovies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<string> keys = await _localStorage.KeysAsync();
        IEnumerable<string> moviesKeys = keys.Where(k => k.StartsWith("mv-"));
        var movies = new List<Movie>(moviesKeys.Count());
        foreach (string key in moviesKeys)
        {
            Movie movie = await _localStorage.GetItemAsync<Movie>(key);
            movies.Add(movie);
        }
        AllMovies = movies;
    }

    private async Task RemoveMovieAsync(Movie movie)
    {
        AllMovies?.Remove(movie);
        await _localStorage.RemoveItemAsync($"mv-{movie.ImdbID}");
        StateHasChanged();
    }
}

@page "/cards"

@using Data
@using Models

@inject IMovieStore _storage

@if (_allMovies == null)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />
}
else
{
    <MudGrid>
        @foreach (Movie movie in _allMovies)
        {
            <MudItem xs="12" sm="6" md="4" lg="4" xl="3">
                <MudCard>
                    <MudCardHeader Class="pb-2">
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1" Class="text-truncate">@movie.TitleAndYear</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Filled.Cancel" Color="Color.Default"
                                   Title="Remove this movie" @onclick="async () => await RemoveMovieAsync(movie)" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="@movie.Poster" Height="444" Title="@movie.TitleAndYear" />
                    <MudCardActions Class="py-1">
                        <MudRating ReadOnly="true" MaxValue="5" Class="mr-3" SelectedValue="@movie.Stars" />
                        <MudText Typo="Typo.body1" Class="mr-3">@movie.Rating</MudText>
                        <MudToggleIconButton Class="ml-auto" Icon="@Icons.Filled.RemoveRedEye" Color="Color.Inherit" Title="Switch to watched"
                                     ToggledIcon="@Icons.Filled.RemoveRedEye" ToggledColor="Color.Secondary" ToggledTitle="Switch to not watched"
                                     @bind-Toggled="@movie.Watched" @onclick="async () => await ToggleWatchMovieAsync(movie)" />
                    </MudCardActions>
                    <MudCardContent Class="pt-1">
                        <MudText Typo="Typo.body2">@movie.PlotTruncated</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private List<Movie>? _allMovies;

    protected override async Task OnInitializedAsync()
    {
        _allMovies = await _storage.GetAllStartsWithAsync("mv-").ToListAsync();
    }

    private async Task RemoveMovieAsync(Movie movie)
    {
        _allMovies?.Remove(movie);
        await _storage.RemoveAsync($"mv-{movie.ImdbID}");
        StateHasChanged();
    }

    private async Task ToggleWatchMovieAsync(Movie movie)
    {
        movie.Watched = !movie.Watched;
        await _storage.SaveOrUpdateAsync($"mv-{movie.ImdbID}", movie);
        StateHasChanged();
    }
}
